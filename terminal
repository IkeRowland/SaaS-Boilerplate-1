# Create Next.js app with TypeScript, Tailwind, and App Router
npx create-next-app@latest saas-boilerplate --typescript --tailwind --app --src

# Install core dependencies
npm install @clerk/nextjs@latest \
           @lemonsqueezy/lemonsqueezy.js \
           form-data \
           mailgun.js \
           mongoose \
           next-themes \
           stripe@latest \
           zod

# Install development dependencies
npm install -D @types/mongoose \
             @types/node \
             @types/react \
             @types/react-dom

# Install Docker (if not already installed)
# For macOS:
brew install docker docker-compose

# For Ubuntu:
sudo apt-get update
sudo apt-get install docker.io docker-compose

# Build and run Docker containers
# Development
docker-compose build  # Build images
docker-compose up    # Start containers in development mode
docker-compose down  # Stop containers

# Production
docker-compose -f docker-compose.prod.yml build  # Build production images
docker-compose -f docker-compose.prod.yml up -d  # Start containers in production mode
docker-compose -f docker-compose.prod.yml down   # Stop production containers

# View logs
docker-compose logs -f            # View development logs
docker-compose -f docker-compose.prod.yml logs -f  # View production logs

# Clean up Docker resources
docker system prune -f  # Remove unused Docker resources

# Start development environment
docker-compose up -d

# Check if services are running
docker-compose ps

# Check application logs
docker-compose logs -f app

# Test database connection
curl http://localhost:3000/api/health

# Test authentication
curl http://localhost:3000/api/auth/status

# Test webhooks
curl -X POST http://localhost:3000/api/webhooks/stripe \
  -H "Content-Type: application/json" \
  -d '{"type":"test"}'

# Stop environment
docker-compose down

# Copy the example env file
cp .env.example .env

# Edit .env with your actual values
nano .env

# Install dependencies
npm install

# Install development dependencies
npm install -D @types/mongoose @types/node @types/react @types/react-dom

# Build the Docker images
docker-compose build

# Start the development environment
docker-compose up -d

# Check if services are running
docker-compose ps

# View logs
docker-compose logs -f app

# View application logs
docker-compose logs -f app

# View MongoDB logs
docker-compose logs -f mongo

# Check container health
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Health}}"

# Stop the development environment
docker-compose down

# Clean up unused resources
docker system prune -f